openapi: 3.0.1
info:
  title: Cookbook API
  description: API endpoints for recipes, authentication, and user management
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /api/v1/auth/register:
    post:
      operationId: apiV1AuthRegisterPOST
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
  /api/v1/auth/authenticate:
    post:
      operationId: apiV1AuthAuthenticatePOST
      summary: Authenticate a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
  /api/v1/auth/refresh-token:
    post:
      operationId: apiV1AuthRefreshTokenPOST
      summary: Refresh access token
      responses:
        '200':
          description: Access token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
  /api/v1/recipes/{id}:
    get:
      operationId: apiV1RecipesIdGET
      summary: Get a recipe by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeDTO'
    put:
      operationId: apiV1RecipesIdPUT
      summary: Update a recipe
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      responses:
        '200':
          description: Recipe updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
    delete:
      operationId: apiV1RecipesIdDELETE
      summary: Delete a recipe
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Recipe deleted successfully
          content:
            application/json:
              schema:
                type: string
  /api/v1/recipes/user/{userId}:
    get:
      operationId: apiV1RecipesUserUserIdGET
      summary: Get recipes for a user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeDTO'
  /api/v1/recipes:
    get:
      operationId: apiV1RecipesGET
      summary: Get all recipes
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeDTO'
    post:
      operationId: apiV1RecipesPOST
      summary: Add a new recipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      responses:
        '200':
          description: Recipe added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
  /api/v1/recipes/{id}/user/{userId}:
    get:
      operationId: apiV1RecipesIdUserUserIdGET
      summary: Get a recipe by ID for a specific user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeDTO'
  /api/v1/users:
    get:
      operationId: apiV1UsersGET
      summary: Get all users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
  /api/v1/users/{id}:
    get:
      operationId: apiV1UsersIdGET
      summary: Get a user by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
components:
  schemas:
    RegisterRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
    AuthenticationRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    AuthenticationResponse:
      type: object
      properties:
        token:
          type: string
        refreshToken:
          type: string
        userId:
          type: integer
    RecipeDTO:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        time:
          type: integer
        portions:
          type: integer
        created_at:
          type: string
          format: date-time
    Recipe:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        time:
          type: integer
        portions:
          type: integer
        created_at:
          type: string
          format: date-time
    UserDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/Token'
        recipes:
          type: array
          items:
            $ref: '#/components/schemas/Recipe'
    Token:
      type: object
      properties:
        id:
          type: integer
        token:
          type: string
        tokenType:
          $ref: '#/components/schemas/TokenType'
        revoked:
          type: boolean
        expired:
          type: boolean
        user:
          $ref: '#/components/schemas/User'
    TokenType:
      type: string
      enum:
        - BEARER
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
